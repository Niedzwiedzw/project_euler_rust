//Even Fibonacci numbers
//Problem 2
//
//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


fn main() {
    let mut v = vec![1,2];

    fn fib(number: i32, mut v: &mut Vec<i32>) -> i32 {
        match v.get((number - 1) as usize) {
            Some(&x) => return x,
            None => {
                let fib_1 = fib(number-1, &mut v);
                let fib_2 = fib(number-2, &mut v);

                v.push(fib_1 + fib_2);
                return fib(number, &mut v);
            }
        }
    }

    let mut sum: i32 = 0;
    let mut iterator: i32 = 1;
    loop {
        let fibonacci_number = fib(iterator, &mut v);
        if fibonacci_number > 4_000_000 {
            break
        }
        if fibonacci_number % 2 == 0 {
            sum += fibonacci_number;
        }

        iterator += 1;
    }
    println!("The sum is equal to {}", sum);
}
